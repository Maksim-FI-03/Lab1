#include <iostream>
#include <algorithm>
#include <cstdint>
#include <string>

#define NUM_LENGTH 512

class BigInt {
private:
    uint32_t arr[NUM_LENGTH]{};

    static uint32_t charToNumber(char c);

    static uint32_t strToDigit(const std::string& str);

    static char numberToChar(uint32_t n);

    static std::string digitToStr(uint32_t digit);

    void longShiftDigitsToHigh(unsigned int n);

    void killLastDigits(unsigned int n);

    unsigned int bitLength() const;

    void longShiftBitsToHigh(unsigned int n);

    void setBitTrue(unsigned int n);

public:
    BigInt();

    explicit BigInt(const std::string& str);

    friend std::ostream& operator<<(std::ostream& stream, const BigInt& bigInt);

    BigInt operator+(const BigInt& bigInt) const; //LongAdd

    BigInt operator-(const BigInt& bigInt) const; //LongSub

    BigInt operator*(uint32_t n) const;   //LongMulOneDigit

    BigInt operator*(const BigInt& bigInt) const; //LongMul

    BigInt operator/(const BigInt& bigInt) const; //LongDiv

    bool operator<(const BigInt& bigInt) const;

    bool operator>(const BigInt& bigInt) const;

    bool operator<=(const BigInt& bigInt) const;

    bool operator>=(const BigInt& bigInt) const;

    bool operator==(const BigInt& bigInt) const;

    BigInt preCalculation(unsigned int k) const;

    friend BigInt BarrettReduction(const BigInt& x, const BigInt& n, const BigInt& mu, unsigned int k);
};

uint32_t BigInt::charToNumber(char c) {
    if (c >= '0' && c <= '9')
        return c - '0';
    if (c >= 'A' && c <= 'F')
        return c - 'A' + 10;
    if (c >= 'a' && c <= 'f')
        return c - 'a' + 10;
    return 0;
}

uint32_t BigInt::strToDigit(const std::string& str) {
    uint32_t number = 0;
    uint32_t mult = 1;
    std::string a = str;
    std::reverse(a.begin(), a.end());
    for (char c : a) {
        number += charToNumber(c) * mult;
        mult *= 16;
    }
    return number;
}

char BigInt::numberToChar(uint32_t n) {
    if (n <= 9)
        return n + '0';
    else
        return n - 10 + 'A';
}

std::string BigInt::digitToStr(uint32_t n) {
    uint32_t num = n;
    std::string out{};
    for (int i = 0; i < 8; ++i) {
        out += numberToChar(num % 16);
        num /= 16;
    }
    std::reverse(out.begin(), out.end());
    return out;
}

void BigInt::longShiftDigitsToHigh(unsigned int n) {
    for (int i = 0; i < NUM_LENGTH - n; ++i) {
        arr[i] = arr[i + n];
    }
    for (int i = NUM_LENGTH - n; i < NUM_LENGTH; ++i) {
        arr[i] = 0;
    }
}

void BigInt::killLastDigits(unsigned int n) {
    for (int i = 0; i < NUM_LENGTH - n; ++i) {
        arr[NUM_LENGTH - 1 - i] = arr[NUM_LENGTH - 1 - i - n];
    }
    for (int i = 0; i < n; ++i) {
        arr[i] = 0;
    }
}

unsigned int BigInt::bitLength() const {
    unsigned int a = 0;
    while (arr[a] == 0)
        ++a;
    uint32_t b = 0;
    while ((arr[a] & (1 << (31 - b))) == 0)
        ++b;
    return (NUM_LENGTH - a) * 32 - b;
}

void BigInt::longShiftBitsToHigh(unsigned int n) {
    unsigned int q = n / 32, r = n % 32;
    if (r == 0)
        longShiftDigitsToHigh(q);
    else {
        for (int i = 0; i < NUM_LENGTH - 1 - q; ++i) {
            arr[i] = (arr[i + q] << r) | (arr[i + q + 1] >> (32 - r));
        }
        arr[NUM_LENGTH - 1 - q] = arr[NUM_LENGTH - 1] << r;
        for (int i = NUM_LENGTH - q; i < NUM_LENGTH; ++i) {
            arr[i] = 0;
        }
    }
}

void BigInt::setBitTrue(unsigned int n) {
    unsigned int q = n / 32, r = n % 32;
    arr[NUM_LENGTH - 1 - q] |= 1 << r;
}

BigInt::BigInt() {
    for (uint32_t& i : arr) {
        i = 0;
    }
}

BigInt::BigInt(const std::string& str) {
    std::string a = str;
    a.erase(remove_if(a.begin(), a.end(), isspace), a.end());
    a = std::string(((a.length() + 7) / 8) * 8 - a.length(), '0') + a;
    for (int i = 0; i < NUM_LENGTH - a.length() / 8; ++i) {
        arr[i] = 0;
    }
    for (int i = 1; i <= a.length() / 8; ++i) {
        std::string buff = a.substr(a.length() - 8 * i, 8);
        arr[NUM_LENGTH - i] = strToDigit(buff);
    }
}

std::ostream& operator<<(std::ostream& stream, const BigInt& bigInt) {
    for (uint32_t i : bigInt.arr) {
        stream << BigInt::digitToStr(i);
    }
    return stream;
}

BigInt BigInt::operator+(const BigInt& bigInt) const {
    BigInt res{};
    uint64_t carry = 0;
    for (int i = NUM_LENGTH - 1; i >= 0; --i) {
        uint64_t temp = (uint64_t)arr[i] + (uint64_t)bigInt.arr[i] + carry;
        res.arr[i] = temp & 4294967295; // 2^32 - 1
        carry = temp >> 32;
    }
    return res;
}

BigInt BigInt::operator-(const BigInt& bigInt) const {
    BigInt res{};
    int64_t borrow = 0;
    for (int i = NUM_LENGTH - 1; i >= 0; --i) {
        int64_t temp = (int64_t)arr[i] - (int64_t)bigInt.arr[i] - borrow;
        if (temp >= 0) {
            res.arr[i] = temp;
            borrow = 0;
        }
        else {
            res.arr[i] = temp + 4294967296;
            borrow = 1;
        }
    }
    return res;
}

BigInt BigInt::operator*(uint32_t b) const {
    BigInt res{};
    uint64_t carry = 0;
    for (int i = NUM_LENGTH - 1; i >= 0; --i) {
        uint64_t temp = ((uint64_t)arr[i]) * b + carry;
        res.arr[i] = temp & 4294967295; // 2^32 - 1
        carry = temp >> 32;
    }
    return res;
}

BigInt BigInt::operator*(const BigInt& bigInt) const {
    BigInt res{};
    for (int i = NUM_LENGTH - 1; i >= 0; --i) {
        BigInt temp = *this * bigInt.arr[i];
        temp.longShiftDigitsToHigh(NUM_LENGTH - 1 - i);
        res = res + temp;
    }
    return res;
}

BigInt BigInt::operator/(const BigInt& bigInt) const {
    unsigned int k = bigInt.bitLength();
    BigInt R = *this, Q{};
    while (R >= bigInt) {
        unsigned int t = R.bitLength();
        BigInt C = bigInt;
        C.longShiftBitsToHigh(t - k);
        if (R < C) {
            --t;
            C = bigInt;
            C.longShiftBitsToHigh(t - k);
        }
        R = R - C;
        Q.setBitTrue(t - k);
    }
    return Q;
}

bool BigInt::operator<(const BigInt& bigInt) const {
    for (int i = 0; i < NUM_LENGTH; ++i) {
        if (arr[i] < bigInt.arr[i])
            return true;
        if (arr[i] > bigInt.arr[i])
            return false;
    }
    return false;
}

bool BigInt::operator>(const BigInt& bigInt) const {
    for (int i = 0; i < NUM_LENGTH; ++i) {
        if (arr[i] < bigInt.arr[i])
            return false;
        if (arr[i] > bigInt.arr[i])
            return true;
    }
    return false;
}

bool BigInt::operator<=(const BigInt& bigInt) const {
    for (int i = 0; i < NUM_LENGTH; ++i) {
        if (arr[i] < bigInt.arr[i])
            return true;
        if (arr[i] > bigInt.arr[i])
            return false;
    }
    return true;
}

bool BigInt::operator>=(const BigInt& bigInt) const {
    for (int i = 0; i < NUM_LENGTH; ++i) {
        if (arr[i] < bigInt.arr[i])
            return false;
        if (arr[i] > bigInt.arr[i])
            return true;
    }
    return true;
}

bool BigInt::operator==(const BigInt& bigInt) const {
    for (int i = 0; i < NUM_LENGTH; ++i) {
        if (arr[i] != bigInt.arr[i])
            return false;
    }
    return true;
}

BigInt BarrettReduction(const BigInt& x, const BigInt& n, const BigInt& mu, unsigned int k) {
    BigInt q = x;
    q.killLastDigits(k - 1);
    q = q * mu;
    q.killLastDigits(k + 1);
    BigInt r = x - q * n;
    while (r >= n) {
        r = r - n;
    }
    return r;
}

BigInt BigInt::preCalculation(unsigned int k) const {
    BigInt beta;
    beta.setBitTrue(k * 64);
    return beta / *this;
}


int main() {
    BigInt a("ed7620a8954fec4877041a97c62c64d11a3a7cb3fc7a8d8db154fa6a6f4c14514ea52db12a9043e56f319a375f03a825a01f254ca9373935a02c0d49a5f1561077ffddb02f8ac4df2f2511351087e9d87750eccfd361e749c179078b998b87e99fcb96d51b7c86e8618f316565e6203e28412f4c4a0401241486464b3a0610694902b6a6cc34e264be2fc73038524af6320a1030fc4ab48e927823b812b4ad1366967d76efbef8a7452ea5ccf3facc5db19c5717e88c75131145d8c7f74efdffc808a4e4183d2b679f14e2c0ef225287c6a3db7c1fa83d47a87f0901f92b687b0572ab0cbaf4f32dbb2ed29f0d0864ddf7fdf50bdd2ee25fc17a9df1f8b17a536175f613a9bb7657769fd68fb7736672c39f2e6709a182aad7d8c2f66e0f14448ca5b88d5c50e36e85cc3b8eb195b59d9f217c07ba9d5cb4f0c91bb47ac9da06730a168d0bc2a7517b45c57ad2ca81669ea3ba75364953aaa52dfb806df15427c36284713646209a07892806534c6e51c6faeee75a8f4fc2ed4eb5705fef2d3d62e3819f2bab12a4756490f8f3c7621521afa7e729ced09cca99426a44921b7c313e3d609132ad958f953bd31bb4090785d49c2ee3c8654c991d72bbbe5e8a0d4ae4b652be5dfafc198995a337fb787c8dc8d0c9481e968462f8e176d58c637b8dc9e2e00974fd037970d68608816ea68b6c836fc5fa1dbd8f91696a04e2da4b015495430e90d53eede2c49b04ab29252bf43dacad2e3d3be40511c1ca4d4845afe7b14e80a127f2686002705a3a70a90e4d0d6b352b9a0be3e607b74e09130057ef3cd709c94ec0a4bbfcd303ccb12af2d0f01ec7a07694f6632c00877e829835743854c219d4d4df69e2de25808f41b4c639cbda2c5f5ecb5fe28d8b864445501a85d4a0b6af52c0c90edf2a1270a9368258965f4ea03051b9bcfcbb77c8cb84d5689e155caead1f01681bbddc0833bf4433cebfa6ea078045c535e3cc66a6c161d1cfada7e0a01ae68a077ca038b303bc5c3d132568cb1f6d2cf51c610435a79096e3c36f8627ca7820bd08a38954d4ac3aed54de143910d060db563f24e320f8777d0800afe20e5d65abdd9d22efda0db0888e0cf329deea91281a2bdb4c4a3f9113ba309fec5177119052bb418415ceb4507be5dcaf89e2d1c80160fdd72507d37b3b9c2cc8324511568b1832ada0629381da718c71bc0ffd2f37b2d9c56b3550e22ce411a3602e8cae794f570070068189844706add567e85ef4f4d0faa5f4a452a993c632406c04d2accbff7a8809db0ce112c1d5ce1f3eb876293cc3d669d7b8e892228289f2e61da8603856c5d22723bdc43c740caa8ec32f0148fb343ea8a8cd847ab9ab567bf3a5ef0c7a02a5ab017b6d98f6f2f3655d347f05ef9429c9d5a5a5d146bc0852536305c497087ec1f347341a7a52e378487525bd25"),
        b("46eeb00a357596ade1d7ba9809e830d2eba6301e742adb6b370e0fb9a787003490913e1a11462382b9deeddb45bb5ad8c4528d76f4d9209d3f5a03f9bee17f1db428567f53c9bdf2122d6c9991457747536f39c7caea0ccdb19191d5578a0c8a244d1aba619d78b0d2c74b2fd0d20ded5144f48db25d32adafe08c9163cfb7003b08bbd7a8196c7d5c365ee5e429f0f484f304d5551d55094edd120683666f485db6cb420d9532de4b9ad51bb663a0dbe400042f24b8caf24436db44200c2920f47ab3075d6099e4c5bdd11b1c9af87084aa5943a4a5fbda0dea7feaf9fd14a419aa6d20ef90bd50463c415dc749a14f4b910130b9e4763e7a0e962cb419c87736fba9305b7bbb48e95c76f9c3b164b99ffe0297dd062299e8e117d2c5797db7c87eb29492f2cabaca588d56b5f253f2dccef45da221e158b9129fd2fdbff037065c5865f45e2bd931e4498f75cb8a01eb5a3cdffcbc8e0cb83023125c4a742f457a67a327fd2015b64ab195b4fd0c3d7b1243cee647be80d074d970206c26c75794b5434438e482d187f4000ed971b2bd71b20c15000bec17dee36c08547eae7dfb58d2c680469dd9265aadada4ce7861a0b925102f398b05ab3247c7baac01633cfd6e8aee040232257772078c04f33257f0c5117a921f0b314ad8e11296956579710d19115f183e2c4b1554b1499eafd98f62258d302089825a94f5b38cca208382a4eb0f38adb08c252988a3432d17d00c12dc73c082c201fd255ea181df10f5b9f5b7404f88306ac4552e77d75b4907b05e28b4c3158c6a4c8130487e78a971cb945a465146ae5be6e0a3652f2d82da42fca35d746b157375c57f516106b52249eaeb56553aaa126518776f2ffac3c21de35878c39ffce3dfcd9bc7d49b2225dc0c4aa0c04f29e257b15edab4076e4a569b15c654a0be758ae4e210b60a4eae2e503d74a9c226d7fec5a9ec6836aa9781c83873611872de62bc16bece35cf8d083fcaae4a07287ec43e5af1f61913348dced8059896ebc194bd6e466ccb01cdb32918762807981b1d9fd216864b88ce92bc3dd9f41fed3a84e56fb932a8a4e0705afa711f2d624438bb48fa8012d09ba2fae7f0dde249432c8217c6d36a9474e3975f47eaa989cb50fd64f5303a8a021d079a847178939a678f08be348d09181ef64149c573edf735ede253b9f8f8f0ed85d3559b58967dfa798db8a6072b9444ddac84bd47b2ba2d037738e38f546ce9eef11f0dd120d3cd7186939a3e8ede26547d43e18a1b1e9c52b3bfa5bd2763815d97adb41efc7e988528642766604fed741dfba8476c5c943bf1e4c365a3e80653e9d9583ed10887b6a97b995c68387888cd8d2eadb12a7a9e4098579f6c538a4fd2696d1a907cae63a17ed0d72ed3ab37a4942b9dfc0420f4bdc9512ae34c6d6f699f783d0fb40a3d0c9fc50a");
    BigInt sum("13464d0b2cac582f658dbd52fd01495a405e0acd270a568f8e8630a2416d31485df366bcb3bd6676829108812a4bf02fe6471b2c39e1059d2df86114364d2d52e2c28342f835482d141527dcea1cd611fcac026979e4bf417730a9960f1159473c418b18f7d19ff9934567c9536b82e2b798623d9fc6133d1c466d2dc9dd5c769840b727e744e4ee21a6626161c7c3beab6fd150651680997e15535be961b1c5bc44d48b8fd542b8590c97ae8aa5e6d39959c5b470d454005557cb40c175b2720bc8357eb759dc54c64d2b3dc0bbd4af84b4e34bfc44e3921b66988ecf3287d1f1f1d182daa85b07e016b13fcd452062d438ef63c9713589e3b89341eaccb42ca98719f44053731a05ffc4d897b24cb2c639d30fee6a7a544c0b9dac9338891fc55246b21ef43ae295024c8e5678809907bf070655cbf3e0da9dbbb877889ca3d79666ef30020d32aad2a0f0a48960b6889fdf7553305e1b75d5e1e92ca3bc85708dcec145e4340afbdd3d99c08497a8f420d32b640d70e43bdc38ee0805b5404ba7836e26fe3f72746ec84f902a0d3c7df2159f33ecedc88e27825d64ce69a2aaf39963357b2f43368bb9680c958d77fe7755553f3f79ed79ec8a5038619360eae21b3c1494bfefe4baf0d153f877d6fc020c18e599928a36e2a2c4fb69efa10f34353ed22865c1bb79d219b5d32b8453b4612d1eb874dde1913c3fefa96671521d817e7f9a00dec9e6ee9c48d4e6c5243c449bf89a1fdbea6070ee728eeca24c0dd6b4437e1777a98cac6c588b248045754bdc95de05d21705054387e5191790161086b640fa0075317e3b3a731e05875ab331b6afdeb000bd6a1c606cfe39eea96823fad702a0f897c47f69cefbf3c788857af32a522fec843c25b274e18e0724061e0eb576fa1eaab669088ed24b0a4ccaf317514f4d1102f47e19d887ed5d38396ee52d1586f45d966e167c8706a69dbb596f81a4b1ff32427f1fa8b34dc90eeda0f78562aa743654e45d7922ecc16f0ea0beb2b01620b2ec1b28aa77100a95e4a0cdbe5ae2f62933e5cdaba0fa05d7acda992b80858fe0ae5c0c5f8578bc5d8e7d80271cf0f70a19e672697a302aaa9538375fdd10c282dbdaa31f2aeb6deb474ab19788a95db42628db7b071be9fd0d158166a4e281d7d39570a1f32642e1ff2717ce5f23c203c47446d6beca699538107adc727ca528df7a8c56b7fcc96c995bfd968ceeb12e8b9b1f0883a8fc4736b787566147ef63bb5d07b886b3934d2caa726d7a7bc5b8aa125608ba537af6d5c6a78c075f4ca9dd73d9e8d642a36b9c52d068dcac9f64f7a599a44fbbc69ba2d77a79d94b2ddb31679d87ce2579c7721319b11a9675c80f691e68764196ef935514dd70611837013c0d5fdd6c6c2fd750d4a39fce4b80c734820cf15c1ebcb2f62b0d392b76297828581c5822f"),
        sub("a687709e5fda559a952c5fffbc4433fe2e944c95884fb2227a46eab0c7c5141cbe13ef97194a2062b552ac5c19484d4cdbcc97d5b45e189860d2094fe70fd6f2c3d78730dbc106ed1cf7a49b7f42729123e1b3080877da7c0fe775b642017b5f7b7e7c1ab9df0e378ec7e63595141250d6fc3abe97a6ce7664a5b9b9d63659690df9facf241b75e761f9684a54285a01ad170b5ba72d5f85439b11b18f4e3dcb08dfb234e229c5c8f993d0b13d972b81cd9c52e8c3d3aa20cd0efd83d742d4ded38df1dcbadc9182d95711a5d2875a1741f982387b02416d9a948916ff2e53d6ebc83debcb6435dd74f2914145bec38eac6cf3db234a6c21476c07c54497b1dc2a7a4ce34e3fbb0e8d435f95f3c201b923a12bcf2c9b6010eef7ab23a895968cc42705f8c95e18b3bb73ae37fba361aac25287aa187b7b5c37b67be17d09e9cf6cadbe2717647b7849617beb5cfef764b3497d95398cc59decfdd86e11a6dff87de81cce0e490084513e76709e4f62144be8ab18744791421cd9dc003f8306760b4ecc5be7722e21a3dc9cf8e4edf062643df5db14cec4b0b2ba5efe3c3d9ccdb342e48dcab266f7b66ee1256e0f3a8f2433e309d3992bc193724073f6a3de0be7a7b8e4336ff6f9e7641e31306f73895b70e00436a4046557c7969df479cce6285071d2f0639deb3b448b70b3d02507db92f40da06ced9d060f0ed50f2f4d80e0d1129e23819c913d569f717c07e5f814243199d0ba7cb92203149c6babc6669ef1f758c960d86a37f53e1b2bc2994dc5455d0d0c76d6f6577bbb361dc09487ae7d7142af82fd79f66015f2606781fd6ff6ad2224430229e0efb63b082d21918051ee69d6c37f9a35577dc5ae115f46f1041be881b39bbece7c02bfefbe6faa2df4a9c85615ef0396e6b72dcb37bca1c83801fb49884b8f93443217d96712c136273a4dd7e804eaf829695613ef9ffd14acb206873388ef0d676279cd0d9870f1d4c98fe2f99698f267c5c921ae4299f087ce6e3b1fd03433ab9837ae1a976aa5c2e3baaaf95e20325d031d368d03094bdda831170420192395dbf5e685f23a7c1807220d8f90b4ac192cf094a2a2dd09720d8da61c154795a764a6026507e1b5caad7c5ae8b542c7abc092edc611498bcc9748e1616b36f6486a38f8a2c94a1befb484fa526754444ddb68a8c478b4a771a5fc071bf119259202b5a9fa33be3fa10c04805f545bad745fab021673711b99979a9327f8dcb4941aed6e6136bc17167dfe2c4fe4a8254d687ff90c59bd60a659af49650db6d1a0a6334dc5155d7619ea44ca967a3b1d9651e1b67b74f121ea20cfd3eae4353ba2070c8585af9ecc06301ffff74c0bfa2c01556556b4da965220b1a9042bdc6276b6f99300351865561e9e0111a5a8c004315ea53c736c25325483dd94a23d432f6e0b6885f81b"),
        mul("41cbb40b24365faa98e46297ded230f6bf985b1289ad6e116431677f1d5ceb625e2953528ee4c037b49cf9214ac107bf477a8a16beffb096e95a0cde6496f4194fce0527cf8ae8eac0f118c8a56ab82a08789bdeeab4fd6fc5bb771d1028933d1ac6254405f6656ade406d258255818b97edc3e222df2d533af9decc0cd02f904532d5b32b3acf21180e1ce192ee26e75ee704c41794d148c4b0ff2412e07ae64dcc2f43bf026bcbb357af571d4b7f1c9c79771ae64c2b48ca470b298ba0c3fbf11dc82ff7ac2280e2e4be3a818f105104e705715cb80315efe84c22cf4465080bd2d9c30af04b5d3618ea044be6904bd8c007741656a2e00d49e157a86cd331c18dcfbef6a86eb155e703f0935e07e32c58021c43246b596675e8ee579d416d2abe2b6d682ab3a038d4d80a03215c556dacb2e5ad9eee607d215576760a8a192c1f8ff4207deb04b7ad0f93d97ba14cba6aad519d0ad9ea12fb0c8572634048eb1dad13c035a5fa0d603361ebf33c4ceed60914f874fd9aa9f72dc437f8240dd3a84a346bd9e9648bb49a4835f11669e03f055cc759add41f2a3cf5abcf61bcb745896203b88cdc9cf5fd31ac9147d99eb0f5d1214c3d19049ca7265c0f6aa8734042a20739b95ccf3d627feb20a0fb25a0464d014de66c15bb21977e689a9248638a6291d6d97f1b5b26a98069e52ba74a9e249b7426cf7a206d0dc2cd81457bc736b4ef03bac79693783696cd4d96f818b0db70310d1d8eeb352506ce4054202fa6a26d5e35681c18c1f02ec8fa2905aab9d9f3bdf44f119d21fa788d0600df858bf0b70f14aa8bdf586959959c7519fe1ae970bb29cacdc2e04a40e8a18c785de087803d5ad68e35a2a993f62d93ce1d48f83c7608b50f51f884d9c3de94bf41b4b55b05e463ceba32d354373c11752422f23dcb38a320f04c5314eb912af9d77c33d2364f7c61bfae0d93f452afbb3f1a5c6e3fb30125df49615490c3a0973ba849ef495ef2b2a69c59848e11ebbb591ba54e9db5f47708704c1de5abfb9442a4f580e9096caa418e229e894820af1b28bc50c0198af975343c12c07d38f562e6a2f9709388bd9b6cdcb665b31610b36320b730f6acea60b09ab8b33ba6f64aced2090a5aa87e45a91ff534def9d6f45105076de498a9567eb98eedad4edc5d589427c51f32e2439b2281079d1e985c2d64dc43da3e70b01f6c4b462e7844be3e8299084e1aaedd2e56295172a1b76b205a0ad32766a2cb0e983a46f8e969165c29c5a8415da90a124d85bf9f126542ebf4f878425af5eace5b4bb6e8508783f767db93f51b82ef42ab4a98d055ed51f7ae3151c611015bf5cf130c719c8fe0accb40f606c3f69a47eeb88fe5b80fab460accad5533d0938b492fd87407a0d77bcfa4486a58792cea16336e56c1e35d279e60b7fb6d8cfcbcf62dbc625887142d8cd5a63cfaee4ddcdb25c6569b90153dda09ee7cbdb3b4bca8b4350592e6aea7740a24ace77afc0f8970b53b7309b97b6cf79d62d21b674b66c8ab1880a5408b4fa2b8ff027ebba79a12a97320a54783d936762e8e035ed7d7339dc2b97f63e00642a3f860f7a0f9d3804cf7c5866469d7bd6ff6293480ed91932b0bb75ae283a354f7b94a651f83a0cec41187643925c0e929f72943a6b9d4f43d658db127ac42109176e877ed8b9f09f544e1a52b39a5c400f3a71b095b8f86d4f460231c94d1acf0d59e6faa765159b4a40e697e9a9c95bd870c97ef1cca64fbf5d98079866eaa8768ebfa3bf3188be335bc0b2d43e776a7a6c4a7468395c37b102a063c715cefedfd929df727c71fb82c41886ea994e8883550ee0f6f41a0c392f63ad123d5cc5ac63b3566f2737ba8295254de84f9d1130c38238a55ddb324d253bb250f73775537b1b510a8e3ca2ce53b55c9479b101273f002c3ff10a8e74263f753d39e4578e5ee38b164153d09a94bb06cd35d74443582bb02f45a00cca77aecd246ca471bc85505bda1c4af8f7cd96e17fe6ec23e4788297c16a192d867bca12abbf7af7d31604e6bfdc88e55c21ef588e96c9444b932177e14825013b48ddad5278890d817a7d1de1f96b724f9ff7af9dc51cac353c401ca61568f435508794b84696c97287b76218e6af5877b856eb9c4fe8f970c28717981c6e016349b35e907265d9d0a20ad98365be57024aa1917494873e251a0c053b94d31a74f6be4842f03b34f26bdbab423a3d3fc2f61de0a5463c65516906ede29c31b99f7a6bc0f03deab8be2b9c844bb11ea2484d9d0208d542cff482c42ddd5b0c855be025b96503452bd0dadbf881d5798bf2b6e9d1a9180d61fc60039377f8285a3996746c5f6e5315a3c9d04b129ef9ec2a7d7c3d0c88ba27163508fbf04b03e0732a8eadfe381936ef64671e54b56b4989d1a11ed3ad38de767a0b8cc27b9957b4eed08a7b16dd924b8148fb7b4b05a95163c9f6f3e27cfcdc98ceea8c3960f38dc526c31420621de482fa51d336078d7942ecfd3f55c0d11a97c221655ee878dcc27140b64e0d5d171b01b36737dfb437fc1da546393b8f5777548c916a78d49ceead0280a0b1224117a3f9644548adeb545f4c55c414feef17afe54125d4bb11e490c6075eae68bf8706bf61f273c576c786909a2942b636d44fe113a712eafe5dd3792d7246cfe342b1880d1c91d433cebaa5a4f71608316c1a7991a6fb5a17df382a25cc625a2466909f2fc07af6f0c56d42a28e96588aa1ca616c7c26dba78aea785e781ab5199897e2b6059329e153601827ebf56ba9db9cbfcbf15d2fd3db9e7f62f66a9a8edafac6b2019418d1da4b5652c2aee5e177074926a5485ae059fca366990b66181ab03e76ca4d4d65f192778c782c49dcbc1ef568019d401dc72");
    std::cout << "Sum: " << ((a + b) == sum ? "ok" : "not ok") << std::endl;
    std::cout << "Sub: " << ((a - b) == sub ? "ok" : "not ok") << std::endl;
    std::cout << "Mul: " << ((a * b) == mul ? "ok" : "not ok") << std::endl;

    a = BigInt("755fc48e86264660802121e1ba1343c0cc4e731c8b361b5f6afd201ae0bbb63add9cd8b2d0e10fb467f3ffb3803dbd34a02ebb510e4a963f077043e6dc0d72c523c75b78551a3988a7fa00365edcad4b2bd6198b225ae63dfc7a5fa1fc43609930b2511829c1ef01ec254c344ec7798b420c4bd6f3da4b70074bce9f726616cd19b6cf0dbb63550044eec3be5c71883ef6bd180724f8f2178370329589dba3901616ae0830097e9a5aced076b3f758b2452078e55743d9ec6d3c1e7690984e4ac62b52b99493f9b0e3f4a3e3c27d5e1a66c7d3e32f75c3be46eff86bc296e7020ca8e96fe15c9cb26daea337daec05f2fe77b19330279e95a124039f23be717062ad285f068862fcef96aa69bdce6f9a94df8180b41cd36ac1767eeb3c8b73c36b9de86459eee1a83716467735cbdad22e3e3a8488e420d02077e71db4fc56e2ffd407bdee2f51e46e7a1676359e3aabae2989d41fc7c7c744eff2f9b1334497d905f2e980d5571af07a0f500d3baca4bd59271887d9ed787fc2effe9f589a8296427aa49b29e4bb9ab8eee4847e152c9fa4ca71d12a7f31a05490529c026c7148b237b62368b26e95931aacecd1c45bc02992fe7cdd8d0a7b9bf7fd8f24079f2a8812c15f712bcc921efef62abae221c15fcaba4ef13795bd819712ea8708be547013a2b672075f199af38b4f077f0b3cda618c12f4281653b4cfbf0a760d571c0975d65fe64d7d211b007c5100da13524b7f07c5375aaea8420f14545373473a26859c93ae9bc7a850cfe6be0af45c55f937d064083d3bec18256e4e2413d51b775b26037a74f2ff3b1c66cf271da6be423b5f35c0a84f85857d87a69f94f79973f8c49942def32169b0ec8c0110a54e7fcaf59e24109da27c7483000de50fd8539dddd8e2e1a52ea33eb06a9c1ecff6af8fd69810aff0a540ad678513f29c4b1364a85bc6670ec5f48c899b0af328a1a53c07cb1d482df3ad8d1123551a589c54f063279029e2abf62856cf38f975fd66b71d714743a37878f4091d92b2f95daefa647e643cb4a76ca61f35b175486f35aec0a5b2d476bf54d6041a413c37b790c709e7bab1635add5573c75af7a7f643624ebaae624e94763e23256b61f0be1a81dc56174ae52e332ccf82fd605ca065624bb72df7aea63459821af3d91f06ee9a105c0c36417efdf47ffa0936f4502f8306c5e5ad770fbd42ac6336334c95483d111bb29e91ad9154b48b63eb803dcbf09d6af338983bcf5e9cbbd1b97227e1951de9040cd93637b3d3aae057fcd75d93756a9400cfe657deb072f9c02f4ee38aec3743f3fdb8422ad08837ff3884ca33e82ebee900668f257a62a0514b59df457d37b4820140cdd2d59d4d2ed1de6688afed006d82f60bde26bab845e047e84bc0245901e40d0561d1832c2ab24b5733e8c850dd49f357a8acfb72a89aa308ba23ccfb35ad24ca22588b60713aeb2050839bb49b2fd25160cc3b580110d1b52d8806058944e715975a4a5bf0a21cd48d05e51547dd1dbcd3c3d11b9376ade71c1d885d941358271add813e2997836aa1b51e88869a0bf4c74b0df18899746194d81073f3c5888a2130d5ec1d87218c42dab1da2b3ba1b56650e1848cca42e8004dec042038964a455c2c0f4051733b230ca6947bf7fe4abba8b605d0a398f1bab6d2a207b00f55b8a561bede756d7753d72a86f4f2d08653168c6c91d00a5a2018336c28fb88e86683deed498582e85456525f7c07187aab619329c2a10179750325cea394f69b42f9cb527cc03bcfd611725afd25553e6c22b3458ab574cd93138d1fcfc13a96fab886879246b8d48512d5a17f28d33c2c9700bc1e46dab5af952b86f74b12dc2c12a50d0a44b733a887cc3f1a76c595e0486e4e43cad49f40ed28d91dae2e5a42fb684e69ee8815091f3670689628e170cdfd919025c2c7852238a590183078d436d32d0389e08ac18c190635f57b57dc75df836def7e408880a7f9bd0110cf687d4fb7104db1d7b202088cb43d60271d111be3178aec3a5eef20842d2cabd13ae0e9a36553b991c9e39f1fc309c6c75eb70b25a27c1a5c6f0979d6406139fac7bce2791101c5724aba2bc621821020657bc35bfe5eddd91b006abd045bd9a7cc78cfd62b9ef142fbe2c788272db4ad933dcd946ca221607ce6f0176590226d5c10a5d7105035ebcbf79e8e53fa22529cd988710c41b003a25b01bb8ac8f476438009eeae285786e1dfe93beffc1dfb185407e1293d94a4aef1978d74c251b1e8d936d30cec37d5be7895b39d562fe1595b1f8af2adc59de7cc97e6ed42bf9b2c464b2c74b6a6d0084440c0ffc410c587565a39b3ad8a4f93e5278abbef737289683a946806638053105b1b4d4884370a2f0de1c9a64aeb1b47f2673d0992fb1f40aff483f8dd76e1f23a920d5d3074315ce8482880edc9a9675904c1940fd189dbfa38ab0c46199d4bf51474a6877f79ab27e5864134462f0cbf5be5c161faf818fc1e443e8109469496bc37442822017365ebe003e59652389f04775abb440c94948ad990b6eb4014f13e71748efadd07bb2f4d1fcd3ac27227c312c56cf41bdccd60a1372332909c65a9b89e925827b64e1a5b729b1818d204a47d3fc387813eca16a165d2be782e0f0216d7d46b2b8ece7220416e3fbc5c6191971b23236c5844a320ac6562ac5cb5ac2109dfac63659bb424b4a825b358c00b57905376f0bc3021dbf4a8f372ae84f0d75ebeb48fa04578a233d6e668213168c580510a1828cb60282fcdccdcdba42ada63f95c7374314e752a4127d37159f4c9d00a852a8627159ade81d114238ce9153fd5dc1f40d7edab3ef18e503fe72611746a23706b4bc9955d263260b66b4ba359115a85e32b8a348e");
    b = BigInt("3d348c3c2854e8bb18b0e53168e8f1a2638a8374fc25a40305d98f1b6f248e7b4eb2720c9d61e8d10e13e93b578dd95f31fb694ce56f3c563b94f98c6b05d5db36635b53c33f6308765175d79479574e6762a042582383a77065926fcf510f7b6fa7e46ec01893c811f6de80775de86e601454c57e54fa987c92741854db2cff7574605c022c4d8281530278770133ece3d9fb8dd16a5fdd2c97d9f2a25b840684552bea973145b4bcc7cc56b98cbc33cb2c22b47d71e71694ccfe2a3a401e47a102f0e05f9c76acb12be859e93f2f76c6cce2d293e9fc7fd490ae10f0666662adb281adb11f94ddcfdaf0a78e8e6b6cb7c01f3965378730cdc86893aca8384f7763db598d3dc2ed5c5680de27e7e18de6c392f8c8bf93dcf664ca5854c4f4a121af5298722198db690aaabb4ecffaa846704bc7ec1c34fb77e86173553519a692e0f01c0406f2aa613074f44d4b62fdbbb75f1d92844cb283e9a97ddb6bb9277d25dea4a7fa7c5eba248c87a05859bd1b3294e55bdaac8f896d466312540dd3dc178a4de8682297cf0c831576a8f7c5da63af28b7f8473d8800ca6c0c1c858cad7cbfe3c55ef7761fad857328d58d4a47d9cd0d344e5b6320161501925ddf9f32c185a4255d4bff5fcf19cb3f3c62f5ccb154e6d50c586dda64ecadc88ec3a550e51c82e1838ae80d100e1c730ad7d0579b35ac67aa3ae6ddc7b77b3ee6773931eede7ad4b8d6efe50d385070d3b93df05f96dfb45d0778ad6cc563171c99f29c76ff431b577aed48ce5da109b17d1478b9391def946cc8c5306035839bf4714463005d0dc41871ec1ee2bc3ce7bf38395edc26483987f9c1baa656c85ee7c1d09782b766f457cdaea56766b0a7ded0d2270a0c288ed40069fd8953f2a719acdb7012203c612b38078721894096318ddd6b9599939447c50e68646576b620e44f6fb9ad7cdbe46c12d98a4e2df3ae5d5c5e18561ebb0a90d5c806260e93153fe0b4b596e6acd45aabf9783046f951902cb54dc65af2ee47f9bb5dc04c7c457520a87823f262b072a1253e0c5f406aabaf4230425e922ccf1f5c665f28376b4c922364019bbcc3d93020bf4de114668a7824d0ec780eee8ef9c45725469628b0107e361b6af457907f21cacdb7a2d9f70506a392de8f4f7628a16a60dcb0956ffdfc9996250c126275cb64cd3c39874afb382b034dc1d7bc8d1a4840f5fb3815b969b2a16e491adce507ae3e2aeb7363e9734003bc6fc2e362de89fdde8e6068d15b7ceb7d3985e066cee04fbc3427d6ab60e3c1b1a8270b6c439a80ce7866c670dbf68c8ad6997fa66d54037d1f4bbe2b9696d06ae1b3c101f8eeef9e6d25d2e28fc24743bea362436e41c78686e0b6e9b04b01af3fb200992ed582839fbbc87bf3ed6c25d320fe4df4c228630b9b95158535a7ba0436980d5687f0acada754");
    BigInt div("1eaef3286a6dd25915896da3dbe343c16ee50f4240fa27ca6c149e4b7f4a7f9254bae6c5d76d98fe7ffa32a9303a6ccd2921610f6a34b71dc3cbb37610cade61374f12b39d5ac6e7acfb5090127b7946cc8f17a4646fb3e092c4d452a9d882a34a5fbcdc52ced2ba1bad6656ab1164ca6fa93a5c571f6c2f2f83938fdf9019a8b30884dec2e4173ad4c52af6a834c61f04c4205b6ed005e62fd1df787101301580d00c1a9ace68d78538c20b49b49a301fbf85e8cc6a37e8b9a7941e42848c5d27a205edd67b2069f075839a1f0b0effe362fdfa21fee55180448c9164101e3b698f148ab6ee0bd9cf640326b27deed50f827190f6b48707e3851171e4f95d040433c992ef5d7e8530fd9e8e0a0a58118caacb79c4e569958d03161c7bb9c896277d9e2ee1489cb208ae4f0726c2b9ed701ea237b49d3a845e3c3787d063e592df29d187fa4310a47e6fa95fe3023bd42cd9ba5d0b085adfcce9a306fdbb03672148b37e3d8d31a428b67ff8e03b3733ebe811cc1bc6a2279291aa0b8e2bb1fd3b2a7488ff67f2f0e8a8d7b34ff65009217f7021deba5bc2c5e04f06e2cab06eb2bead8c4a945ea93ad04527b7d74b7ee36284fa0175a02dd234e7186b5978fdae4c6b831e0560498cc41b0b52707591e2c96d64c5a5868d3abec45e36632664712ad12ae0e305ad1ac31c3effb45db49bd27bac912211cd5de554d5e3d8945dbf4746b88e8fc9e45834e131e1bb0da044ecc74d74dea09df1da9e90571e124fee978bd159d772044e62ffaea32acd426ac82d61b274d340bf5c01076f50041fd0d620e3ece3baf270461f9c5c662f46b2a565c34dff759adc1963f2dd36d1a53f675855f59ec4e35505800a6b7d949fb22b27755edda84c9339055bed01252d9ea8aa47020c35ba7d1de6e04b9a73d2fb965f8ca00a778132ab10e0c70e7b01377bdb3af3d95745e2a1b04d6449eddc9d063778c7ab6cba0355308d72cd4ffc81b885d44b89d7b9d7a063e0b44f209d4b396ecad97746ec27af4999ded6c01ee7bff35e7c38bbd04a6d86e96abe301432dbb59884f098004eb264415d2a539fcdff44d3c35f0a341e10918ab1fa2e83243d9b51bb027053dfb12c7163f316a3459128f7280c9a1afd05f5aae371e896c2faed478122fb6713b0c6dcd76d75979a4fab432072fe3a2dfe47421b1743454676b8fec7bfbbbec273427bc26c56e72b0a3951213de81e26cb78e09cb1d211a427863bdd9441c00eb60eb5136f72e3bb170003ca3cd92a3a580cadb5ca208b13824bbdbf94f5b0aca6f11645540a1e3a8696fa5fd6ca491364c4bd21f5e1ccc40074f5b82f9f9a3f9a08d223e43a75277a4a8b7abab5b44832b48abf962c36cf1846e26cfa7ff1083cc088d2ec6beb63c501f36f0781f1fb433b188b1a0772cd7125afde4fd1c34b49f03618fa1359e");
    std::cout << "Div: " << ((a / b) == div ? "ok" : "not ok") << std::endl;

    BigInt x("8fc8736abcd3bd243e3562a8a8c0c09d2294969f9634414be16ce566dd27c3de8276cc175afc60e7f4db35c3c988cb2628efd8ed07bc18c557b9402abfc49e307d8314facf65ce7b01c12ea204bcd70a3d6d36602e5bdde4ff4b77ca07643b678ff1fb12f0978de05ec59d6a9c0f326338fb92c346af95ec51864cdbf23662771a0de6d5d11cb3f7c08bd5a5554096413df59fa4191059897b885b962f6017b690ffd8842baec1f64fd541553c3933500a6070797b4008d95476f3b444b3cb93d4e3b1228704139dddfe6014914d4e31b1c615eeaf56651446110246d6056745be025474b9285b30b320499300cd05208d24771007b8b3076f147a36a3250074e72108c434c6e6cd4dda9317269402578a49470f5823ebf140d18d31f9576fecc7fb6163f7219ba88bef4ff74e60d867dada8b82ee0a6abedfb61bad0a3fa3d1a14b0deca785bfa735c9c3db0aaa9db06e90b2e3df5a90f71d01c477a65f39c11d8d6e81cc9c995cde405b09de593ea2e773ce6ba3b379ec8de8b71bcf6fa6a074f189aa22e898282a9e16cd77fab45a784e9192ce6a413f288114984fe2d3d161d7b4122c32861eb4a4b72ec22700faa01682d17bd53bd2b604c13bed5c38d08499c5fe223621259f97444059a9bb89b582b36ea318df91db50be2a614e1c8028a6964420b2f8a1fb6ad1b30a4b15bf8ac077376a656741f30c72401b50a9ac96b7058f06af869a57077f03033cf24870bc34d2618c8eca18f0b29f414b0ae228c108bbc19b5c772a791e6fe6bb9fc4b244c1cc26a29949b741bc505145d5c74cd4bb6a2fd097dafe3f96bde5f762eeb7afc17d2f754decb9c8902e390c32e08d5edb4cd34c8a53a4893faf72dfeb628df6630e5e170311f0bf06ec219e0b95e9d7f6bb2bd2ab78f5c015a5d2bfd985b5b0f9c776e0443209b95c2cc2afc02096d2f8df7d7372188620859c0a465e8f9f53623a7362daff49b53d9aec2d778b2b3d5a89d5cd2b8c3b58893c3b25c14b380d36f3964ba86a473dafa030607281694accf890cdf468b02bfb98c4d340cb69dc13794fbed3395f6f4e1dd312b49ba658135d894004301aa104856cd05112bc0271daad4b55c2f8a4dfcccce0a60f18a77f49d080e173fe813502d5a8d0d90d6ea54559b4db8739816d75462db1ad6eb16411dd51cc9317705265d460bc0946a49b4a32d9009e7bdc9ceb1257be95503da8fe2bf06b01981101d07a22d80523a4e7f5e2f9309fad86293292c5c03dc7b712a101a3cb9d443fe553911159e807f36144d0a90f4783648ba1ac1a3d6f07e74b382aff8f0239943ca7533700865962976685dbdbd75c8fe56c21f69bbe3c4abb1f7b3179dbd430d34bd9a51165b11d2444dbf45b83e212ecfaad54521ddd631841b30ef8ebf63e245198376fbbc26f9cc72d844b1c8c1a51a2e110b911"),
        n("87ed1d801d5d1f39617024483bd5d61fa1db2f05cbc312dbd63b6011c3535dc7e966da10100194079243f0d8553367471b0d3e4089cd3330d8b15b6337817c7b9820fad099e762de1cc106c01ee3ebe9c695140fc90e7c065c31d260ba63ff59db4f2fd77199192702e115f83b3e7ab6bc993af2bb3bbb92d33774c403c8f4ae1e40b2c211ed90c4655d2d3159f62aa0f5ef8a40f7c67e99960bc3bea898023bfa6e3d9f80fc2f456c555e380c67c22804a76d8233afc5ff4434e4e7eefacf116e7c50952c061d59915cffd938a7efd6de738152fa741aec2678a91dcd30e53f371366fa59b99fc7208f301cdb1d95079bdd3b417965e452709362155ec296352f40d79bb794683691e04b66f9ace0dc987168e4bd161ef71a9a2a684273e2485786b69c61efedb2651976363d6be74975eb9275fbe4232bf35a08176f6088564b0385f92a8441b262df67e7a94375042e48ac47c4bc134cc46cfdd4e0722f8c577e830ec28c3a5c6f07be6d85acc0e72a78a8e4829184d56b69a8051dcd407383f5a2bcbc30f9993aefad07c40929b78a28f1ab57067829061e012f610d31330082c9fc326ac3e7cd07f6134a90e1c70f0c71bb1cc9d58523562b177ad0b06daffd3acf095b445964acc522c9c22d13283b30c6e98f10697834020702d53b3c9067c3ed5268a999459fe80b111b0d4695e0a88ba1ae4fef50c474f88f1be990"),
        mu("1e224d508307b7ad6a9f9c63e8521e1ae409c8596fde79f4ecc5301432be77241f56e77a09628667350608a36774e74d7603269e1fb62e18fbdabaef0fe2a5a15a094e2e2e822d97d4568d3e17760d5c33bec3205bec236c1dc25155f9823f301d6ebfe7286e8defae30d8e798d5fd07c8783febd437d95de72508be910ba4bdeafb7b281481420a63b4c73a49e2e3f9cadafc061b5382bdfda56ae6fb07f88be614c501b821fabd928cd35dbe5bea5b85ef18207f3063fa80a5c7b717821caea1198e9a5dc8442753e89df1902cb5b2b0c043d711525f552bea961be5b7f626fb4535ec43f09d5ad47640452a384bd4aee501b5a5a519c74412c54a2a944c5eafa0c0c7bed94d9084c24e782a0ca9e8ab972e8137976bc02d2f83c3cf21ab26fdb91070d9b0b29d23448167935f2d26c5f43b1e99d88c076d7adef7e1f753eb9e700500280628adb3dd69af2c7ca3a812b263391a9f6b224a15daa092fd5f67922b596467e8c6a4c284219122a903c995f7dc6ccf9783bb06136c83e79c297f2535115cd4e17e6f2e2729cd18feefa19c97fec34eb3cc555751aa6e1a1c7513a9380228c310a1062391f9d677b9a9f8daa52688db67282c1968e492c91454a51f61282821f450792af578bc7656bb0b233bd766d9ac42264f8811f3391560763f897284d3438b5536219a758ef869cf6050e05abfaa4b751a623eac4a256f8ad"),
        mod("5e1806424c149ba1d8bb3b8586a91979e6cce34317df3af2c603d5e72b7491b3a3f6f0a2b92a45dc3cc186fbb1c61d8b47024b190632dc6b6860f3c04283ade7f4bbe073e986aaa209d0accd18565d5f324e30575dfc2eb6bc16d899eef5c7ebb1f9baea521393d1e6aa1d67ced9418f0fa3f9dbff298f3165e6f205ca40a94adb50fc47ab76cfa31fe3041bd9f4b5ab7938d006650ffc737e9234591eac2d0095402a5e13485d2b1ae31fa0494f4cbb7c7c2671d93e2cc34841cec265edb11668ddc79dad119c6262c3141cd5b67b71fc2c0c19c4eb63def53f9629664d6128a9f14ecaec37ad9310ae0fe8fee3d5234b9316de8885e62f4423a455d7eac3009f93e54ed5e32d91b5e10e07e0f1bf18f57b377de6735dca6275b574ff2912d18bb4d85588e34161d122a4bf9bd7348bbbba5726b3e8eb13b90abfd13a9942232e665e8b2c559f2f7f0ab1d21f768b24efc77d30c3a8fbbcab66b9be5657552973568cdd995131dbd3355d29543d8f6a52cbc14905ca8fec341abed339141d7cb7f95cdf765f07987671e26c6aaf86a8accf5da7cad0ddbe7eb1a93b45cba2926404858103fa9ff5fde2656c8a5259675c312482a8c8196257695504805b2562e7532a0b86c204b22831497d71cf370875d3024bc8396c09bfb7ec2e2dfa27d3c136d707625cac7232a7b8c0526d1c74e5b85e1466a74892bbad0c29cb3d4de1");
    std::cout << "PreCalculation: " << (n.preCalculation(128) == mu ? "ok" : "not ok") << std::endl;
    std::cout << "BarrettReduction: " << (BarrettReduction(x, n, mu, 128) == mod ? "ok" : "not ok") << std::endl;

    return 0;
}